;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                            ;;
;;                          >>> railway/main.rkt <<<                          ;;
;;                      programmeerproject 2,  2023-2024                      ;;
;;                      written by: Jonas BrÃ¼ll, 0587194                      ;;
;;                                > version 1 <                               ;;
;;                                                                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#lang racket
(require "train.rkt"
         "segment.rkt"
         "detection-block.rkt"
         "switch.rkt"
         "crossing.rkt"
         "light.rkt")

(provide railway%) ; (/ -> class)

(define railway%
  (class object%
    (super-new)
    ; higher-order procedures
    (define/public (setup-object object connection id-list position)
      (let setup-object ((ids id-list) (objects '()))
        (if (null? ids)
            objects
            (setup-object
             (cdr ids)
             (let ((id (car ids)))
               (append objects `((,id . ,(make-object object
                                           connection
                                           id
                                           (position id))))))))))
    (define (search-object id object-list)
      (cdr (assoc id object-list)))
    
    ; trains
    (define trains '())
    (define/public (get-the-test-train-list connection)
      (list (cons 'test-train (new train%
                                   (connection connection)
                                   (id 'test-train)
                                   (previous '1-5)
                                   (current '1-4)))))
    (define/public (add-a-train! connection id previous-segment current-segment)
      (set! trains
            (append trains (list (cons id
                                       (new train%
                                            (connection connection)
                                            (id id)
                                            (previous previous-segment)
                                            (current current-segment)))))))
    (define/public (set-train-speed! train new-speed)
      (send (search-object train trains) set-train-speed! new-speed))
    (define/public (test train)
      (search-object train trains))
    
    ; segments
    (abstract segment-list)
    (define segments (segment-list segment%))
    (define/public (get-segment-ids)
      (map car (segments)))
    (define/public (get-segment-state segment)
      (send (search-object segment (segments)) get-state))
    ; detection-blocks
    (abstract detection-block-list)
    (define detection-blocks (detection-block-list detection-block%))
    (define/public (get-detection-block-ids)
      (map car (detection-blocks)))
    (define/public (get-detection-block-state detection-block)
      (send (search-object detection-block (detection-blocks)) get-state))
    ; switches
    (abstract switch-list)
    (define switches (switch-list switch%))
    (define/public (get-switch-ids)
      (map car (switches)))
    (define/public (get-switch-position switch)
      (send (search-object switch (switches)) get-position))
    (define/public (set-switch-position! switch new-position)
      (send (search-object switch (switches)) set-position! new-position))
    ; crossings
    (abstract crossing-list)
    (define crossings (crossing-list crossing%))
    (define/public (get-crossing-ids)
      (map car (crossings)))
    (define/public (get-crossing-state crossing)
      (send (search-object crossing (crossings)) get-state))
    (define/public (set-crossing-state! crossing new-state)
      (send (search-object crossing (crossings)) set-state! new-state))
    ; lights
    (abstract light-list)
    (define lights (light-list light%))
    (define/public (get-light-ids)
      (map car (lights)))
    (define/public (get-light-signal light)
      (send (search-object light (lights)) get-signal))
    (define/public (set-light-signal! light new-signal)
      (send (search-object light (lights)) set-signal! new-signal))
    ))