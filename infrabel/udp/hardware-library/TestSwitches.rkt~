#lang racket
;(require "interface.rkt")


(define (get-reversed-switch-position position)
  (if (= 1 position)
      2
      1))



(define (test-switches)
  (for [((switch-name switch-address)  #hash((S-1  . 0)
                                             (S-2  . 1)
                                             (S-3  . 2)
                                             (S-4  . 3)
                                             (S-5  . 4)
                                             (S-6  . 5)
                                             (S-7  . 6)
                                             (S-8  . 7)
                                             (S-9  . 8)
                                             (S-10 . 9)
                                             (S-11 . 10)
                                             (S-12 . 11)
                                             (S-16 . 15)
                                             (S-20 . 19)
                                             (S-23 . 22)
                                             (S-24 . 23)
                                             (S-25 . 24)
                                             (S-26 . 25)
                                             (S-27 . 26)
                                             (S-28 . 27)))]
    (display "Testing switch ")
    (display (symbol->string switch-name))
    (let* ((start-position (get-switch-position switch-address))
           (reversed-position (get-reversed-switch-position start-position)))
      (set-switch-position! switch-address reversed-position)
      (sleep 2)
      (cond ((= reversed-position (get-switch-position switch-address))
             (set-switch-position switch-address start-position)
             (sleep 2)
             (cond ((= start-position (get-switch-position switch-address))
                    (displayln " OK"))
                   (else (displayln " PROBLEM"))))
            (else (displayln " PROBLEM"))))))
            

        
       